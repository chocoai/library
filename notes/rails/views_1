1. Action View
在 app/views 文件夹中，每个控制器都有一个对应的文件夹，其中保存了控制器对应视图的模板文件
举例说明：
articles_controller.rb 控制器文件中的 index 动作对应 app/views/articles 文件夹中的 index.html.erb 视图文件

2. HTML输出由模板、局部视图和布局这三种 Rails 元素组成
2.1 模板
2.1.1 ERB模板
(1) 可以使用 <% %> 和 <%= %> 标签来包含 Ruby 代码
<% %> 标签用于执行不返回任何内容的 Ruby 代码，例如条件、循环或块
<%= %> 标签用于输出 Ruby 代码的执行结果
其他，
<%# %>（html本身的注释<!-- comments -->）
<%- -%>

<h1>Names of all the people</h1>
<% @people.each do |person| %>
  Name: <%= person.name %><br>
<% end %>

2.2 局部视图模板
2.2.1 局部视图的名称
<%= render "menu" %>   _menu.html.erb
<%= render "shared/menu" %>     app/views/shared/_menu.html.erb

2.2.2 使用局部视图来简化视图
使用局部视图的一种方式是把它们看作子程序（subroutine），默认情况下，ActionView::Partials::PartialRenderer 的对象储存在和模板同名的局部变量中

<%= render partial: "product", locals: { product: @product } %>
<%= render "product", product: @product %>

<%= render partial: "product", locals: { product: @item } %>
<%= render partial: "product", object: @item %>

<%= render partial: "product", object: @item, as: "item" %>
<%= render partial: "product", locals: { item: @item } %>

2.2.3 渲染集合
<% @products.each do |product| %>
  <%= render partial: "product", locals: { product: product } %>
<% end %>
<%= render partial: "product", collection: @products %>
<%= render @products %>

2.2.4 间隔模板
<%= render partial: @products, spacer_template: "product_ruler" %>
会在两个 _product 局部视图（主局部视图）之间渲染 _product_ruler 局部视图（间隔模板）。

3. 布局
3.1 布局是渲染 Rails 控制器返回结果时使用的公共视图模板

3.2 应用于局部视图的布局称为局部布局
<%= render partial: 'article', layout: 'box', locals: { article: @article } %>

articles/_box.html.erb
<div class='box'>
  <%= yield %>
</div>

若不使用_article局部视图
<% render(layout: 'box', locals: { article: @article }) do %>
  <div>
    <p><%= article.body %></p>
  </div>
<% end %>

4. 视图路径
在渲染响应时，控制器需要解析不同视图所在的位置。默认情况下，控制器只查找 app/views 文件夹。
我们可以使用 prepend_view_path 和 append_view_path 方法分别在查找路径的开头和结尾添加其他位置
